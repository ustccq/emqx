emqx_authn_schema {

global_authentication.desc:
"""Default authentication configs for all MQTT listeners.

For per-listener overrides see <code>authentication</code> in listener configs

This option can be configured with:
<ul>
  <li><code>[]</code>: The default value, it allows *ALL* logins</li>
  <li>one: For example <code>{enable:true,backend:"built_in_database",mechanism="password_based"}</code></li>
  <li>chain: An array of structs.</li>
</ul>

When a chain is configured, the login credentials are checked against the backends per the configured order, until an 'allow' or 'deny' decision can be made.

If there is no decision after a full chain exhaustion, the login is rejected."""

global_authentication.label:
"""Global authentication"""

listener_authentication.desc:
"""Per-listener authentication override.
Authentication can be one single authenticator instance or a chain of authenticators as an array.
When authenticating a login (username, client ID, etc.) the authenticators are checked in the configured order."""

listener_authentication.label:
"""Per-listener authentication override"""

backend.desc:
"""Backend type."""

backend.label:
"""Backend Type"""

enable.desc:
"""Set to <code>true</code> or <code>false</code> to disable this auth provider."""

enable.label:
"""Enable"""

failed.desc:
"""Count of query failed."""

failed.label:
"""Failed"""

matched.desc:
"""Count of this resource is queried."""

matched.label:
"""Matched"""

mechanism.desc:
"""Authentication mechanism."""

mechanism.label:
"""Authentication Mechanism"""

metrics.desc:
"""The metrics of the resource."""

metrics.label:
"""Metrics"""

metrics_failed.desc:
"""The required authentication information is found in the current instance, and the instance returns authentication failure."""

metrics_failed.label:
"""Authentication Failed Times"""

metrics_nomatch.desc:
"""The number of times the instance was ignored when the required authentication information was not found in the current instance."""

metrics_nomatch.label:
"""Nomatch Times"""

metrics_rate.desc:
"""The total rate at which instances are triggered, times/second."""

metrics_rate.label:
"""Total Triggered Rate"""

metrics_rate_last5m.desc:
"""The average trigger rate of the instance within 5 minutes, times/second."""

metrics_rate_last5m.label:
"""Average Triggered Rate in Last 5min"""

metrics_rate_max.desc:
"""The highest trigger rate the instance has ever reached, times/second."""

metrics_rate_max.label:
"""Highest Triggered Rate"""

metrics_success.desc:
"""The required authentication information is found in the current instance, and the instance returns authentication success."""

metrics_success.label:
"""Authentication Success Times"""

metrics_total.desc:
"""The total number of times the current instance was triggered."""

metrics_total.label:
"""Total Triggered Times"""

node.desc:
"""Node name."""

node.label:
"""Node Name."""

node_error.desc:
"""The error of node."""

node_error.label:
"""Error in Node"""

node_metrics.desc:
"""The metrics of the resource for each node."""

node_metrics.label:
"""Resource Metrics in Node"""

node_status.desc:
"""The status of the resource for each node."""

node_status.label:
"""Resource Status in Node"""

rate.desc:
"""The rate of matched, times/second."""

rate.label:
"""Rate"""

rate_last5m.desc:
"""The average rate of matched in the last 5 minutes, times/second."""

rate_last5m.label:
"""Rate in Last 5min"""

rate_max.desc:
"""The max rate of matched, times/second."""

rate_max.label:
"""Max Rate"""

status.desc:
"""The status of the resource."""

status.label:
"""Status"""

success.desc:
"""Count of query success."""

success.label:
"""Success"""

settings.desc:
"""Authentication global settings."""

settings.label:
"""Authentication Settings"""

precondition.label: "Precondition"
precondition.desc: """~
  A Variform expression to evaluate with a set of pre-bound variables derived from the client information.

  Supported variables:
  - `username`: The username of the client
  - `password`: The password of the client
  - `clientid`: The client ID of the client
  - `client_attrs.*`: The client attributes of the client
  - `cert_common_name`: The subject field from the client's TLS certificate
  - `cert_subject`: The common name (CN) from the client's TLS certificate
  - `peersni`: The SNI (Server Name Indication) sent by TLS client
  - `listener`: The listener ID (e.g. `tcp:default`)
  - `zone`: The associated config zone.

  The expression must evaluate to a string value of 'true' for this authenticator to be invoked.
  If the expression evaluates to any other value, this authenticator will be skipped.

  Examples:
  - Only invoke if the client is connected from listener `ssl:letsencryt`:
    `str_eq(listener, 'ssl:letsencryt')`
  - Skip if username is empty:
    `not(is_empty_val(username))`
  - Only invoke if password exists and zone is 'zone1':
    `iif(is_empty_val(password), false, str_eq(zone, 'zone1'))`

  Find more information about Variform expressions in EMQX doc.~"""
}
